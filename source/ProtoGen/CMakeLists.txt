cmake_minimum_required(VERSION 3.20.0 FATAL_ERROR)

set(PROTOBUF_GEN_LIBRARY_NAME ProtoGen)

set(PYTHON_FILE python/GenProto.py)
set(PROTOBUF_GEN_INCLUDE_FOLDER ${PROTOBUF_GEN_SOURCE_DIR})
set(PROTOBUF_GEN_ASSET_FOLDER ${PROTOBUF_GEN_SOURCE_DIR}/Assets)
set(PROTOBUF_GEN_PROTO_FOLDER ${PROTOBUF_GEN_SOURCE_DIR}/ProtoGen/Protos)
set(PROTOBUF_GEN_STATE_FILE ${PROTOBUF_GEN_SOURCE_DIR}/ProtoGen/ProtoGen.cache)
set(PYTHON_ARGS ${PYTHON_FILE}
                -include ${PROTOBUF_GEN_INCLUDE_FOLDER}
                -asset ${PROTOBUF_GEN_ASSET_FOLDER}
                -proto ${PROTOBUF_GEN_PROTO_FOLDER}
                -state ${PROTOBUF_GEN_STATE_FILE})

execute_process(
    COMMAND ${Python_EXECUTABLE} ${PYTHON_ARGS}
    WORKING_DIRECTORY ${PROTOBUF_GEN_PROJECT_DIR}
    OUTPUT_VARIABLE PYTHON_OUTPUT
    RESULT_VARIABLE PYTHON_RESULT
    ERROR_VARIABLE PYTHON_ERROR
)
message("[${PROTOBUF_GEN_NAME}.${PROTOBUF_GEN_LIBRARY_NAME}] PYTHON_OUTPUT:\n${PYTHON_OUTPUT}\n")
if (NOT ${PYTHON_RESULT} EQUAL 0)
    message(FATAL_ERROR "[${PROTOBUF_GEN_NAME}.${PROTOBUF_GEN_LIBRARY_NAME}] ${PYTHON_FILE} returns ${PYTHON_RESULT}: ${PYTHON_ERROR}." )
endif()

set(PYTHON_FILE python/GenProtoCpp.py)
set(PROTOBUF_GEN_EXECUTIVE_PATH ${PROTOBUF_GEN_LIBRARY_DIR}/protoc.exe)
set(PROTOBUF_GEN_PROTO_FOLDER ${PROTOBUF_GEN_SOURCE_DIR}/ProtoGen/Protos)
set(PROTOBUF_GEN_GENERATED_FOLDER ${PROTOBUF_GEN_SOURCE_DIR}/ProtoGen/Generated)
set(PROTOBUF_GEN_WRAPPER_FOLDER ${PROTOBUF_GEN_SOURCE_DIR}/ProtoGen/Wrapper)
set(PROTOBUF_GEN_TEMPLATE_FOLDER ${PROTOBUF_GEN_SOURCE_DIR}/ProtoGen/)
set(PROTOBUF_GEN_ASSET_FOLDER ${PROTOBUF_GEN_SOURCE_DIR}/Assets)
set(PROTOBUF_GEN_SOURCE_FOLDER ${PROTOBUF_GEN_SOURCE_DIR})
set(PROTOBUF_GEN_STATE_FILE ${PROTOBUF_GEN_SOURCE_DIR}/ProtoGen/Protos/ProtoGen.cache)
set(PYTHON_ARGS ${PYTHON_FILE}
                -exe ${PROTOBUF_GEN_EXECUTIVE_PATH}
                -proto ${PROTOBUF_GEN_PROTO_FOLDER}
                -generated ${PROTOBUF_GEN_GENERATED_FOLDER}
                -wrapper ${PROTOBUF_GEN_WRAPPER_FOLDER}
                -template ${PROTOBUF_GEN_TEMPLATE_FOLDER}
                -asset ${PROTOBUF_GEN_ASSET_FOLDER}
                -source ${PROTOBUF_GEN_SOURCE_FOLDER}
                -state ${PROTOBUF_GEN_STATE_FILE})

execute_process(
    COMMAND ${Python_EXECUTABLE} ${PYTHON_ARGS}
    WORKING_DIRECTORY ${PROTOBUF_GEN_PROJECT_DIR}
    OUTPUT_VARIABLE PYTHON_OUTPUT
    RESULT_VARIABLE PYTHON_RESULT
    ERROR_VARIABLE PYTHON_ERROR
)
message("[${PROTOBUF_GEN_NAME}.${PROTOBUF_GEN_LIBRARY_NAME}] PYTHON_OUTPUT:\n${PYTHON_OUTPUT}\n")
if (NOT ${PYTHON_RESULT} EQUAL 0)
    message(FATAL_ERROR "[${PROTOBUF_GEN_NAME}.${PROTOBUF_GEN_LIBRARY_NAME}] ${PYTHON_FILE} returns ${PYTHON_RESULT}: ${PYTHON_ERROR}." )
endif()

set(SOURCE_FILES "")
set(PYTHON_FILE python/GatherGeneratedFiles.py)
set(PROTOBUF_GEN_BASE_PATH ${PROTOBUF_GEN_SOURCE_DIR}/ProtoGen)
set(PROTOBUF_GEN_GENERATED_FOLDER ${PROTOBUF_GEN_SOURCE_DIR}/ProtoGen/Generated)
set(PROTOBUF_GEN_WRAPPER_FOLDER ${PROTOBUF_GEN_SOURCE_DIR}/ProtoGen/Wrapper)
set(PROTOBUF_GEN_ALL_WRAPPERS "AllProtoWrappers.h")
set(PYTHON_ARGS ${PYTHON_FILE}
                -base ${PROTOBUF_GEN_BASE_PATH}
                -generated ${PROTOBUF_GEN_GENERATED_FOLDER}
                -wrapper ${PROTOBUF_GEN_WRAPPER_FOLDER}
                -all-wrappers ${PROTOBUF_GEN_SOURCE_DIR}/ProtoGen/${PROTOBUF_GEN_ALL_WRAPPERS})

execute_process(
    COMMAND ${Python_EXECUTABLE} ${PYTHON_ARGS}
    WORKING_DIRECTORY ${PROTOBUF_GEN_PROJECT_DIR}
    OUTPUT_VARIABLE PYTHON_OUTPUT
    RESULT_VARIABLE PYTHON_RESULT
    ERROR_VARIABLE PYTHON_ERROR
)
message("[${PROTOBUF_GEN_NAME}.${PROTOBUF_GEN_LIBRARY_NAME}] PYTHON_OUTPUT:\n${PYTHON_OUTPUT}\n")
if (NOT ${PYTHON_RESULT} EQUAL 0)
    message(FATAL_ERROR "[${PROTOBUF_GEN_NAME}.${PROTOBUF_GEN_LIBRARY_NAME}] ${PYTHON_FILE} returns ${PYTHON_RESULT}: ${PYTHON_ERROR}." )
endif()
list(APPEND SOURCE_FILES ${PYTHON_OUTPUT})

# file(GLOB_RECURSE SOURCE_FILES *.cpp* *.h* *.hpp* *.cc*)
# message("[${PROTOBUF_GEN_NAME}.${PROTOBUF_GEN_LIBRARY_NAME}] SOURCE_FILES: ${SOURCE_FILES}")

list(APPEND SOURCE_FILES ProtoFactory.h ProtoFactory.cpp ProtoWrapper.h ${PROTOBUF_GEN_ALL_WRAPPERS})
message("\n[${PROTOBUF_GEN_NAME}.${PROTOBUF_GEN_LIBRARY_NAME}] Begin building Visual Studio filters: ")
foreach(SOURCE_FILE IN ITEMS ${SOURCE_FILES})
    get_filename_component(SOURCE_FILE_PATH "${SOURCE_FILE}" PATH)
    string(REPLACE "${CMAKE_CURRENT_SOURCE_DIR}" "" GROUP_PATH "${SOURCE_FILE_PATH}")
    string(REPLACE "/" "\\" GROUP_PATH "${GROUP_PATH}")
    message(${SOURCE_FILE})
    source_group("${GROUP_PATH}" FILES "${SOURCE_FILE}")
endforeach()
message("[${PROTOBUF_GEN_NAME}.${PROTOBUF_GEN_LIBRARY_NAME}] End building Visual Studio filters.\n")

add_library(${PROTOBUF_GEN_LIBRARY_NAME} STATIC ${SOURCE_FILES})
target_include_directories(${PROTOBUF_GEN_LIBRARY_NAME} PUBLIC ${PROTOBUF_GEN_INCLUDE_DIR} ${PROTOBUF_GEN_GENERATED_FOLDER})
target_link_directories(${PROTOBUF_GEN_LIBRARY_NAME} PRIVATE ${PROTOBUF_GEN_LIBRARY_DIR})
target_link_libraries(${PROTOBUF_GEN_LIBRARY_NAME} LINK_PUBLIC 
    # 如果是 Debug 配置，链接所有 _Debug 目标
    $<$<CONFIG:Debug>:${ALL_LIBRARY_TARGETS_DEBUG}>
    # 如果是 Release 配置，链接所有 _Release 目标
    $<$<CONFIG:Release>:${ALL_LIBRARY_TARGETS_RELEASE}>)

target_link_libraries(${PROTOBUF_GEN_NAME} PUBLIC ${PROTOBUF_GEN_LIBRARY_NAME})
